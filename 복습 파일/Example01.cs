using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1.복습_파일
{
    //1교시 : 클래스(class)
    //C# 프로그램에서 핵심적으로 다룰 데이터에 대한 설계 도구
    //ex) 은행 계좌 관련 프로그램을 설계할 때
    //    클래스를 이용해 "은행 계좌"를 설계합니다.
   //(접근제한자) class 클래스명
   // {
   //     [멤버] : 클래스 내부에서 설계되는 것(필드,이벤트,생성자,속성,메소드,소멸자)
   //     (접근제한자) 필드
   //     (접근제한자) 이벤트
   //     (접근제한자) 생성자
   //     (접근제한자) 속성
   //     (접근제한자) 메소드
   //                 소멸자
   // }
     //1. 접근 제한자 : 외부로부터의 접근을 허용하거나 제한할 때 사용하는 키워드
     //                >> 유니티에서는 인스펙터를 통해 데이터가 공개되냐 안되냐로 확인 가능

     //  종류 :  public :  모든 위치에서 접근이 가능합니다.
     //          private : 자기 자신을 제외한 모든 위치에서의 접근을 제한합니다.
     //          protected :  상속 클래스 및 인스턴스에서만 접근이 가능합니다.
     //          internal : 어셈블리 내에서만 접근이 가능하다.(같은 프로젝트 파일 내라면 접근이 가능하다.)

     // ※ 어셈블리?
     //   .NET 런타임 환경에서 실행할 수 있는 사전에 컴파일이 된 코드 덩어리를 의미합니다.
     //   >> 컴파일이란 컴퓨터가 확인할 수 있게 작성한 코드의 번역을 하는 작업
     //   .NET 응용 프로그램의 가장 작은 배포 단위(dll / exe)
     //   dll : 한 응용 프로그램의 유일한 속성
     //   exe : 응용 프로그램

     // 접근 제한자를 안쓰는 경우? 같은 작업 영역에서는 제한이 없고 다른 영역에서는 사용 불가
     // 클래스의 경우 -> internal이라고 인식
     // 클래스 내부의 멤버일 경우 -> private라고 인식

    internal class Example01
    {
        //static void Main(string[] args)
        //{
        //    Console.WriteLine(Tester.Tester_Method());
        //    //같은 네임스페이스 내에서 접근 가능하다.
        //}
    }
}
