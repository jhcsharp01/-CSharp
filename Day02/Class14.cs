//using System;
//namespace ConsoleApp1
//{
//    //함수(function)
//    //하나의 특수한 명령을 수행하기 위해 명령문들 모아놓은 명령 집합체
//    //Console.WriteLine()처럼 필요에 따라 호출해서 사용합니다.

//    //함수의 사용 방법
//    //1. 함수를 설계합니다.
//    //2. 메인 코드 등 필요한 위치에서 함수명();으로 호출합니다.

//    //함수의 사용 목적 / 이유
//    //1. 코드의 중복 구현을 막고, 한번 만든 코드를 계속 재활용해서 사용하기 위함.
//    //2. 함수는 명령 집합체로, 특정 프로그램의 기능이라고 볼 수 있습니다.
//    //   따라서 함수 기반으로 설계 시 프로그램의 기능 분석이 용이한 효과를 볼 수 있음.
//    //3. 코드의 유지보수 작업이 쉬워집니다.(잘못된 함수만 찾아서 수정하면 되니까)

//    //단점
//    //함수는 별도로 저장된 영역에서 호출해서 사용하는 개념이기 때문에
//    //무분별한 함수 호출이 성능 저하로 이어질 가능성이 존재합니다.
//    internal class Class14
//    {
//        //void는 비어있는 타입을 의미합니다.
//        static void Hello()
//        {
//            Console.WriteLine("안녕하세요.");
//        }
//        static int Value()
//        {
//            return 10;
//            //return 값; 은 함수를 종료하고 함수를 호출했던 위치에 해당 값을 전달하는 기능을 가지고 있습니다.
//        }

//        //매개변수(parameter) : 함수의 () 안에 만들어주는 변수
//        //함수의 호출 시 만들어지는 변수이며, 함수가 종료되면 삭제되는 변수
//        //함수를 호출할 때 사용자가 보내줄 데이터의 형태를 작성하는 영역입니다.
//        //매개변수는 전달받은 값을 복사해서 가지고 있는 별개의 변수입니다.
//        static void ValuePrint(int value)
//        {
//            Console.WriteLine($"전달받는 값은 {value}입니다.");
//        }

//        //함수를 설계할 때는 값을 전달해줘야 하는 return 함수와 return 값을 전달할 필요가 없는 void 함수로 나뉘게 됩니다.

//        static void Main(string[] args)
//        {
//            Hello(); //Hello 함수를 호출합니다.
//            int a = Value(); //정수 a에 Value()를 호출하고 전달받은 값 10을 대입합니다.
//            Hello();
//            ValuePrint(a); //a의 값을 전달해 ValuePrint를 호출합니다.
//            ValuePrint(100);
//            //ValuePrint(100.5); //매개변수가 표현하고 있는 데이터가 아닌 경우라면 오류 발생
//        }
//    }
//}
